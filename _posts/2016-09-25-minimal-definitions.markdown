---
layout: post
title:  "Minimal Definitions" 
date:   2016-09-25 17:00:00
category: thoughts
author: Jentery Sayers 
---

In 2015, Alex Gil wrote a [compelling piece](http://go-dh.github.io/mincomp/thoughts/2015/05/21/user-vs-learner/) on minimal computing, or "producing our own scholarship ourselves." There, he made the following remark, "I prefer to approach minimal computing around the question 'What do we need?'" Here, I want to follow Gil's piece by outlining my own observations on the topic. The definitions of minimal computing and its frameworks fascinate me, in part because they engage various histories of technology at the intersection of aesthetics and politics. They also help us grasp possibilities for future work. While what's below is rough and warrants more detail, I hope it at least continues the conversation Gil so graciously began. 

So, what might we mean when we say, "minimal computing"? 

## Minimal Design 

To me, minimal computing immediately suggests minimal design strategies, especially as they pertain to workflow and communication. Minimal design applauds and even fetishizes simplicity; it boils practice down to necessities. The Jekyll site generator is an obvious example: "No more databases, comment moderation, or pesky updates to install&mdash;just your *content*." From a technical perspective, such strategies entail responsiveness (across devices), few dependencies, and an investment in plain text, unembellished layouts, and basic templates. While they still require some programming (e.g., in Ruby), technical details and configurations are rendered less significant than the message or substance of composition. One issue with minimal design is its vexed association with legacies of elegance in programming (e.g., pure function; no unnecessary code) as well as pretentiousness in multiple strains of minimalist design (e.g., refinement through the use of essential elements). Such legacies usually aestheticize politics through a mastery of form, content, and even matter. When interpreting them, we might ask where the mess is. Another issue with minimal design is its tendency to parse content from media and technologies instead of underscoring the reality of their contingencies. And yet another issue is dividing labor along these lines (content vs. media) and then ascribing values to those divisions (e.g., programming is a service that supports writing, or writing is a service with programming as its source). 

A more persuasive approach may be refusing notions of pure content or pure medium and then examining their entanglements (e.g., writing through programming, or programming as writing). Of course, minimalist software such as Jekyll can be great. I use Jekyll for teaching and research; when compared with platforms such as WordPress, it's quite conducive to making, maintaining, updating, and reusing course websites, for instance. Nevertheless, the discourse of "minimal design" as a synonym for "minimal computing" may too easily mask the totality of production in favor of demarcation or distillation. In response, we might consider what we marginalize, reify, or appropriate through minimalist aesthetics and how we define "we" in relation to necessity and simplicity. We might also entertain how necessity is intertwined with creative activity (as distinct from productive activity) and whether such necessity is external to minimal computing (e.g., some ideal outcome we seek, or simply a component internal to praxis).         

## Minimal Resources

To many, minimal computing may have more to do with the material particulars of computation than plain text or interface/interaction design. A minimal approach reduces the need for not only substantial storage and processing power but also a reliance on middleware, databases, and peripherals. Such reduction should increase access while decreasing technology's effect on environments (e.g., by reducing waste and energy consumption). The overlaps with minimal design are obvious here (especially if we foreground dependencies), yet interests in minimal resources shift from "just your *content*" to a persistence across settings and material conditions. In short, how can we do more with less, and how durable is our work across platforms, geographic locations, and infrastructures? With these questions in mind, minimal computing may afford some important counterpoints to the impulses of "big" and "macro" thinking, at least when we determine how much technology a given project demands and at what costs. We witness, for instance, a gradual move from mainframes and supercomputing to distributed computing (or big hardware to small hardware), with the latter lending itself to physical computing platforms such as Arduino and Raspberry Pi. Big data no longer requires big computers. 

From my perspective, the issue confronting this sort of minimal computing is the emerging politics of an Internet of Things (IoT), which is conducive to networked surveillance and the proliferation of computer vision for decision-making (e.g., Haraway's informatics of domination). We hear about "smart cities" and "smart oceans," which, at least in theory, may help us become more aware of our consumption habits and our treatment of nature as a standing reserve. Critical work in this area (e.g., by Beth Coleman and Jeffrey Schnapp) asks how such intelligence is embedded in culture. In many cases, we see a curious irony at play in an IoT: a reduction in the size and demands of hardware decreases the perceived mediation of social and environmental relations (e.g., Weiser's calm technology), while also increasing the programmability of those relations and even the programmability of matter. (Perhaps matter *is* a relation, but that's material for another thought piece.) As hardware gets smaller, networks grow. But, as we increasingly need less tech to build durable intelligent systems, we also need to ask how agency, accountability, and responsibility are changing (e.g., Barad's agential realism). While not all minimal computing projects are IoT projects, the latter are susceptible to assumptions that networks or algorithms alone create data or make decisions. Against this tendency, minimal computing could help us better understand how such infrastructures and assumptions are *manufactured* and through what human and nonhuman contributions. Research in minimal computing may also highlight how a reduction in hardware and software costs is articulated with subscription services as well as how labor is valued alongside those services (e.g., what we are paying to access data and how we compensate people for the work of data production). As we minimize reliance on particular resources, what vulnerabilities emerge? As we reduce dependencies in one area, how do we increase dependencies (knowingly or not) in others? 

## Minimal Consumption 

In areas such as political economy, many critics are skeptical of action focused on reduced consumption (e.g., it's too responsive, or it tends to ignore conditions of production); nonetheless, this approach appears common in minimal computing. For one, it may be tied to minimal use of proprietary technologies, which almost always depend on cycles of planned obsolescence. It may also be linked to slowing down the transformation of consumption into production through careful deliberation (e.g., reading history and theory alongside computing, or experimenting with multiple infrastructures against early adoption of the dominant platform). And it may increase collective consciousness about how and why digital technologies are sourced, fabricated, and accumulated (against the assumption that consumption may be separated from production). Yet one challenge for reduced consumption is time, or how to assert the need for more research (as living labor) amidst the storm of progress and its metrics. After all, reduced consumption is frequently associated with creative potential or serious leisure (see Marybeth Stalp), not work or productivity. And many practitioners struggle to carve out that time or convince institutions that it's necessary for informed productivity. The deliberation and experimentation afforded by careful research may thus be less a question of moving fast or slow and more about *how time is valued and negotiated*. 

Following Gil, when is minimal computing about what we need, but also about what we want? How much time, or what sort of time, is necessary to conclude which infrastructures and approaches are most desirable and by whom? Questions such as these may prompt us to account for what Marx, Nick Dyer-Witheford, and Christian Fuchs call the "general intellect." How might minimal computing increase *our shared capacities to think or imagine*, and not just our individual capacities to work or produce? Minimal computing suggests we can engage these questions without resorting to theory/practice or yack/hack binaries (e.g., where living labor is only life of the mind). 

## Minimal Maintenance  

We might say that minimal computing is simply about decreasing the maintenance of machines and related configurations/standards. With less fixed capital required by a given system, perhaps we can focus more on content and shared capacities to think and imagine. Or, without so many WYSIWYG interfaces, perhaps we can attend more to writing, language, and composition. Like many other sections in this list, this position is intimately related to other factors, especially resources and design. Still, an emphasis on maintenance is more of a "long now" issue popularized by Stewart Brand and Brian Eno but also studied by scholars such as Kari Kraus. It asks us to consider the formats we choose, their change histories, their flexibility over time, and their demand for updates. For example, where will this GO::DH project be, and in what state, in 2056? An emphasis on maintenance also privileges stewarding over other paradigms for scholarly communication. For me, an important byproduct of long now thinking and maintenance is the question, "Who do we expect to keep these machines running, and for how long?" What's an ethical expectation? What's realistic? What's left after the whiz bang of new tech subsides? Or, following work by media scholars such as Wendy Chun and Mark Sample, "What does ephemerality teach us, and how does it endure?" On the one hand, minimal computing may be about long-term control over means of production. On the other, it may encourage low-cost or low-stakes experimentation (e.g., Kathy Harris's notion of "bloom and fade" work), without much concern for persistence.  

## Minimal Barriers  

Given its associations with open software and hardware, minimal computing may be defined as a reduction in barriers to entry and access. It may use source materials that can be modified and are licensed for distribution, tweaking, and experimentation. Here, a question is how much knowledge "open" assumes prior to participation, not to mention how this openness is (following Chris Kelty) part of a social imaginary steeped in technical *and* moral practices (which is to say, openness is not merely a technical feature). Of course, minimal computing may also rely on design strategies that strive for universal access (e.g., by everyone regardless of disability; see the W3C) and avoid features that are not easy to see, read, hear, navigate, or find. These approaches tend to underscore the fundamentals of design as well as regular evaluations of content across needs and settings. They also position exclusionary design as bad design (in ways that may differ from what minimal design calls bad design). 

Starting with these articulations of entry and access, minimal computing lends itself to social approaches to materials and built environments (e.g., Sara Hendren's Adaptation and Ability group at Olin or Hannah Perner-Wilson's Kit-of-No-Parts). In this sense, "minimal" implies low-tech methods whereby materials are responsive and even shape themselves to the needs of specific people or situations. These methods redirect physical computing research from an IoT extraction of data from the environment (or the treatment of the environment as data) toward social and cultural praxis premised on negotiations with materials and structures. If an IoT is frequently motivated by reducing barriers to data gathering (through the use of sensors and addressable objects), then adaptability and negotiation paradigms are motivated by reducing barriers to mobility, interpretation, and participation.  

(More coming soon.) 
